rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    function hasAdminClaim() {
      return isAuthenticated() && request.auth.token.admin == true;
    }

    // Users collection
    match /users/{userId} {
      // Anyone authenticated can read user profiles
      allow read: if isAuthenticated();

      // Users can only create/update their own profile
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId);

      // Only admins can delete users
      allow delete: if isAdmin();

      // Notification preferences subcollection
      match /settings/{documentId} {
        // Users can read and write their own notification preferences
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
    }

    // Groups collection
    match /groups/{groupId} {
      // Anyone authenticated can read groups
      allow read: if isAuthenticated();

      // Only admins can create, update, or delete groups
      allow create, update, delete: if isAdmin();
    }

    // Messages collection
    match /messages/{messageId} {
      // Anyone authenticated can read messages
      allow read: if isAuthenticated();

      // Authenticated users can create messages
      // Special rule: only admins can post to announcements group
      allow create: if isAuthenticated() &&
                       request.resource.data.userId == request.auth.uid &&
                       (request.resource.data.groupId != 'announcements' ||
                        (hasAdminClaim() && isAdmin()));

      // Users can update their own messages (for likes, etc.)
      allow update: if isAuthenticated();

      // Only message owner or admin can delete
      allow delete: if isAuthenticated() &&
                       (isOwner(resource.data.userId) || isAdmin());
    }

    // Comments collection
    match /comments/{commentId} {
      // Anyone authenticated can read comments
      allow read: if isAuthenticated();

      // Authenticated users can create comments
      allow create: if isAuthenticated() &&
                       request.resource.data.userId == request.auth.uid;

      // Users can update their own comments
      allow update: if isAuthenticated() && isOwner(resource.data.userId);

      // Only comment owner or admin can delete
      allow delete: if isAuthenticated() &&
                       (isOwner(resource.data.userId) || isAdmin());
    }

    // Conversations collection (DMs)
    match /conversations/{conversationId} {
      // Only participants can read conversations
      allow read: if isAuthenticated() &&
                     request.auth.uid in resource.data.participants;

      // Only participants can create/update conversations
      allow create, update: if isAuthenticated() &&
                               request.auth.uid in request.resource.data.participants;

      // DM messages subcollection
      match /dm_messages/{messageId} {
        // Only conversation participants can access messages
        allow read: if isAuthenticated() &&
                       request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;

        allow create: if isAuthenticated() &&
                         request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants &&
                         request.resource.data.senderId == request.auth.uid;

        allow update: if isAuthenticated() &&
                         request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      }
    }

    // Amenities collection (for reservations)
    match /amenities/{amenityId} {
      // Anyone authenticated can read amenities
      allow read: if isAuthenticated();

      // Only admins can manage amenities
      allow create, update, delete: if isAdmin();
    }

    // Bookings collection
    match /bookings/{bookingId} {
      // Users can read their own bookings, admins can read all
      allow read: if isAuthenticated() &&
                     (isOwner(resource.data.userId) || isAdmin());

      // Authenticated users can create bookings
      allow create: if isAuthenticated() &&
                       request.resource.data.userId == request.auth.uid;

      // Users can update/delete their own bookings, admins can do all
      allow update, delete: if isAuthenticated() &&
                               (isOwner(resource.data.userId) || isAdmin());
    }

    // Advertisers collection
    match /advertisers/{advertiserId} {
      // Anyone authenticated can read approved advertisers
      allow read: if isAuthenticated();

      // Only admins can create, update, or delete advertisers
      allow create, update, delete: if isAdmin();
    }

    // Ads collection
    match /ads/{adId} {
      // Anyone authenticated can read active ads
      allow read: if isAuthenticated();

      // Only admins can manage ads
      allow create, update, delete: if isAdmin();
    }

    // Incidents collection (for map)
    match /incidents/{incidentId} {
      // Anyone authenticated can read incidents
      allow read: if isAuthenticated();

      // Authenticated users can create incidents
      allow create: if isAuthenticated() &&
                       request.resource.data.reportedBy == request.auth.uid;

      // Users can update incidents (for upvotes)
      allow update: if isAuthenticated();

      // Only incident reporter or admin can delete
      allow delete: if isAuthenticated() &&
                       (isOwner(resource.data.reportedBy) || isAdmin());
    }
  }
}
